## from dave-c
global:
  credentials: 
    SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT-SECRET: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


## from dave-internal, raw
#backend:
#
#  spring:
#
#    # Spring data rest
#    data:
#      rest:
#        # Definition of page size for PagingAndSortingRepository
#        max-page-size: 0x7fffffff
#        default-page-size: 0x7fffffff
#        return-body-on-update: true
#        return-body-on-create: true
#
#    # Spring JPA
#    datasource:
#      username: dave
#      #    dev
#      url: jdbc:postgresql://dave-postgresql:5423/dave_db
#      driver-class-name: org.postgresql.Driver
#    jpa:
#      database: postgresql
#      hibernate:
#        # always drop and create the db should be the best
#        # configuration for local (development) mode. this
#        # is also the default, that spring offers by convention.
#        # but here explicite:
#        ddl-auto: update
#        naming.physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#      # Logging for database operation
#      show-sql: false
#      properties:
#        hibernate:
#          format_sql: true
#
#    security:
#      # possible values: none, all, changing (With changing, only changing requests such as POST, PUT, DELETE are logged)
#      logging.requests: all
#      oauth2:
#        resourceserver:
#          jwt:
#            issuer-uri: ${keycloak.auth-server-url}/realms/${realm}
#            jwk-set-uri: ${keycloak.auth-server-url}/realms/${realm}/protocol/openid-connect/certs
#        client:
#          provider:
#            keycloak:
#              token-uri: ${keycloak.auth-server-url}/realms/${realm}/protocol/openid-connect/token
#          registration:
#            keycloak:
#              client-id: dave
#              client-secret: TBD
#              authorization-grant-type: client_credentials
#              client-authentication-method: client_secret_post
#
#  # Define the keycloak development realm here
#  realm: intrap
#  keycloak:
#    auth-server-url: https://ssotest.muenchen.de/auth
#
#  elasticsearch:
#    user: elastic
#    password:
#    host: daveelastick001.srv.muenchen.de
#    port: 9200
#    connectTimeout: 10
#    socketTimeout: 30
#
#  dave:
#    zaehlung:
#      status:
#        #      Alle 10 min
#        updater: 0 0/10 * 1/1 * ?
#
## from dave-internal/application-local.yml, raw:
##
#    email:
#      address: dave-dummy@muenchen.de
#      password: dummy
#      url:
#        adminportal: http://localhost:8085
#        selfserviceportal: http://localhost:8086
#      receiver:
#        # Update-Intervall in Millisekunden f√ºr den Email-Abruf
#        update-interval: 5000
#        hostname: imap.muenchen.de
#    messstelle:
#      # Alle 5 min
#      cron: 0 0/5 * 1/1 * ?
#      # Sollte immer knapp unter dem Cron sein
#      shedlock: 4m
#  
#  geodaten:
#    eai:
#      url: http://localhost:8088




backend:
  replicaCount: 1
  ## from dave-external to extraEnvVars:
  extraEnvVars:
    env:
      SPRING_DATA_REST_MAX-PAGE-SIZE: "0x7fffffff"
      SPRING_DATA_REST_DEFAULT-PAGE-SIZE: "0x7fffffff"
      SPRING_DATA_REST_RETURN-ON-BODY-UPDATE: "true"
      SPRING_DATA_REST_RETURN-ON-BODY-CREATE: "true"
      SPRING_DATASOURCE_DRIVER-CLASS-NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE: postgresql
      SPRING_JPA_HIBERNATE_DDL-AUTO: update
      SPRING_JPA_HIBERNATE_NAMING.PHYSICAL-STRATEGY: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      SPRING_JPA_SHOW-SQL: "false"
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "true"
      SPRING_SECURITY_LOGGING.REQUESTS: all
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI: ${keycloak.auth-server-url}/realms/${realm}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: ${keycloak.auth-server-url}/realms/${realm}/protocol/openid-connect/certs
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN_URI: ${keycloak.auth-server-url}/realms/${realm}/protocol/openid-connect/token
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT-ID: dave
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT-SECRET: TBD
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_AUTHORIZATION-GRANT-TYPE: client_credentials
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT-AUTHENTICATION-METHOD: client_secret_post
      REALM: Dave
      KEYCLOAK_AUTH-SERVER-URL: https://ssodev.muenchen.de/auth
      ELASTICSEARCH_USER: elastic
      ELASTICSEARCH_PORT: "9200"
      ELASTICSEARCH_CONNECTTIMEOUT: "10"
      ELASTICSEARCH_SOCKETTIMEOUT: "30"
      DAVE_ZAEHLUNG_STATUS_UPDATER: "0 0/10 * 1/1 * ?"
      DAVE_EMAIL_URL_ADMINPORTAL: "http://localhost:8085"
      DAVE_EMAIL_URL_SELFSERVICEPORTAL: "http://localhost:8086"
      DAVE_EMAIL_RECEIVER_UPDATE-INTERVAL: "5000"
      DAVE_EMAIL_RECEIVER_HOSTNAME: imap.muenchen.de
      DAVE_MESSSTELLE_CRON: "0 0/5 * 1/1 * ?"
      DAVE_MESSSTELLE_SHEDLOCK: "4M"
      GEODATEN_EAI_URL: "http://localhost:8088"
  ## CA-Certfificates Volume for LHM Certtificates
  extraVolumeMounts:
    - name: cacerts-lhm
      readOnly: true
      mountPath: /mnt
  extraVolumes: 
    - name: cacerts-lhm
      secret:
        secretName: cacerts-lhm
        defaultMode: 420
  

## from dave-external raw

#admin-portal:
#
#  spring:
# 
#   # Define the keycloak development realm here
#   realm: Dave
# 
#   # spring cloud gateway config
#   cloud:
#     gateway:
#       actuator:
#         verbose:
#           enabled: false
#       globalcors:
#         corsConfigurations:
#           # The cors configuration to allow frontend developers cross origin request via this api gateway
#           '[/**]':
#             allowedOrigins:
#               - "http://localhost:8081"
#               - "http://127.0.0.1:8081"
#             allowedMethods: "*"
#             allowedHeaders: "*"
#             allowCredentials: true
#             maxAge: 3600
#       routes:
#         - id: sso
#           uri: https://ssodev.muenchen.de/
#           predicates:
#             - Path=/api/sso/userinfo
#           filters:
#             - RewritePath=/api/sso/userinfo, /auth/realms/${spring.realm}/protocol/openid-connect/userinfo
#         - id: backend
#           uri: http://dave-backend-service:8080/
#           predicates:
#             - Path=/api/dave-backend-service/**
#           filters:
#             - name: Retry
#               args:
#                 retries: 2
#                 methods: GET
#                 backoff:
#                   firstBackoff: 10ms
#                   maxBackoff: 50ms
#                   factor: 2
#                   basedOnPreviousValue: false
#             - RewritePath=/api/dave-backend-service/(?<urlsegments>.*), /$\{urlsegments}
#             - RemoveResponseHeader=WWW-Authenticate
#       default-filters:
#         - RemoveResponseHeader=Expires
#         - RemoveRequestHeader=cookie
#         - RemoveRequestHeader=x-xsrf-token
#         - TokenRelay=
# 
#   # security config
#   security:
#     oauth2:
#       client:
#         provider:
#           keycloak:
#             issuer-uri: https://ssodev.muenchen.de/auth/realms/${spring.realm}
#         registration:
#           keycloak:
#             client-id: dave
#             client-secret: TBD
# 
#   mvc:
#     log-request-details: on
# 
# hazelcast:
#   openshift-service-name: dave-adminportal-dev


admin-portal:
  replicaCount: 0
  ## from dave-external to extraEnvVars:
  extraEnvVars:
    SPRING_REALM: Dave
    SPRING_CLOUD_GATEWAY_ACTUATOR_VERBOSE_ENABLED: "false"
    #SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_ALLOWEDORIGINS:
    #- "http://localhost:8081"
    #- "http://127.0.0.1:8081"
    SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_ALLOWEDMETHODS: "*"
    SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_ALLOWEDHEADERS: "*"
    SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_ALLOWCREDENTIALS: "true"
    SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_MAXAGE: "3600"


eai:
  replicaCount: 0

frontend:
  replicaCount: 0

selfservice-portal:
  replicaCount: 0


## https://github.com/bitnami/charts/tree/main/bitnami/elasticsearch
elasticsearch:
  global:
    imageRegistry: "dockerhub.muenchen.de"
    storageClass: "thin-csi"
  sysctlImage:
    enabled: false
  master:
    resources:
      limits:
        cpu: 2
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 1Gi
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
